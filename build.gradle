plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.5'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'com.github.node-gradle.node' version '7.0.1'
    id 'com.ewerk.gradle.plugins.querydsl' version '1.0.10'
    id("org.springdoc.openapi-gradle-plugin") version "1.9.0"
}

group = 'com.sweetk'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

ext {
    jarVersion = '0.0.1'
    apiDocVersion = 'v0.0.1'
    apiDocversionTag = apiDocVersion
    env = findProperty("env") ?: "local"
    buildTime = new Date().format("yyyyMMddHHmmss")

    openApiOutputDir = file("$rootDir/docs-dist")
    springBootStaticDir = file("src/main/resources/static/docs")
    apiDocFileName = "openapi-${apiDocversionTag}.yaml"
    apiDocLatestFile = "openapi-latest.yaml"

    apiDocUrlBase = [
            local : "http://localhost:28080",
            dev   : "https://dev.api.yourdomain.com",
            stage : "https://stage.api.yourdomain.com",
            prod  : "https://api.yourdomain.com"
    ][env]

    environments = ['local', 'dev', 'stage', 'prod']
    defaultEnv = 'dev'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-security'

    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    implementation 'com.querydsl:querydsl-apt:5.0.0:jakarta'
    annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jakarta'
    annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
    annotationProcessor 'jakarta.persistence:jakarta.persistence-api'

    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'
    implementation 'com.bucket4j:bucket4j-core:8.7.0'
    implementation 'io.micrometer:micrometer-core'
    implementation 'io.micrometer:micrometer-registry-prometheus'
    implementation 'org.postgresql:postgresql'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
}

openApi {
    outputDir.set(openApiOutputDir)
    outputFileName.set(apiDocFileName)
    apiDocsUrl.set("${apiDocUrlBase}/v3/api-docs")
}

tasks.register("copyVersionedDoc", Copy) {
    if (tasks.findByName('openApi')) {
        dependsOn("openApi")
    }
    from(openApiOutputDir) {
        include(apiDocFileName)
    }
    into(springBootStaticDir)
}

tasks.register("copyLatestDoc", Copy) {
    dependsOn("copyVersionedDoc")
    from(openApiOutputDir) {
        include(apiDocFileName)
        rename { apiDocFileName -> "latest.yaml" }
    }
    into(springBootStaticDir)
}

tasks.register("copyDocsToResources") {
    if (tasks.findByName('openApi')) {
        dependsOn("copyVersionedDoc", "copyLatestDoc")
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

// ✅ bootJar 전역 설정
bootJar {
    enabled = true
    archiveClassifier = ''
    archiveBaseName = 'iitp-api'
    mainClass.set('com.sweetk.iitp.IitpApiApplication') // ✅ mainClass 명시

    manifest {
        attributes(
                'Build-Time': buildTime,
                'Version': jarVersion
        )
    }
}

jar {
    enabled = false
}

bootRun {
    systemProperty "spring.profiles.active", env
    systemProperty "app.version", jarVersion
    systemProperty "app.build.date", buildTime
    systemProperty "jasypt.encryptor.password", System.getProperty("jasypt.encryptor.password", "dev-password")
    systemProperty "API_DOC_URL", "${apiDocUrlBase}/docs/latest.yaml"
}

// ✅ 환경별 빌드 시 bootJar 설정만 수정 (별도 task로 재정의 X)
tasks.register('buildLocal') {
    group = 'build'
    description = 'Builds the application for local environment'
    doFirst {
        project.ext.set('env', 'local')
        bootJar.archiveVersion.set("${jarVersion}-local-${buildTime}")
    }
    dependsOn("copyDocsToResources", "bootJar")
}

tasks.register('buildDev') {
    group = 'build'
    description = 'Builds the application for development environment'
    doFirst {
        project.ext.set('env', 'dev')
        bootJar.archiveVersion.set("${jarVersion}-dev-${buildTime}")
    }
    dependsOn("copyDocsToResources", "bootJar")
}

tasks.register('buildStage') {
    group = 'build'
    description = 'Builds the application for staging environment'
    doFirst {
        project.ext.set('env', 'stage')
        bootJar.archiveVersion.set("${jarVersion}-stage-${buildTime}")
    }
    dependsOn("copyDocsToResources", "bootJar")
}

tasks.register('buildProd') {
    group = 'build'
    description = 'Builds the application for production environment'
    doFirst {
        project.ext.set('env', 'prod')
        bootJar.archiveVersion.set("${jarVersion}-prod-${buildTime}")
    }
    dependsOn("copyDocsToResources", "bootJar")
}

tasks.named('build') {
    dependsOn "build${defaultEnv.capitalize()}"
}

processResources {
    filesMatching('application*.yml') {
        filter {
            it.replace('@build.time@', buildTime)
                    .replace('@version@', jarVersion)
                    .replace('@springdoc.version@', apiDocVersion)
        }
    }
}

// QueryDSL 설정
def querydslDir = "$buildDir/generated/querydsl"

querydsl {
    jpa = true
    querydslSourcesDir = querydslDir
}

sourceSets {
    main.java.srcDir querydslDir
}

compileQuerydsl {
    options.annotationProcessorPath = configurations.annotationProcessor
}

/*
configurations {
    querydsl.extendsFrom compileClasspath
}

sourceSets {
    main {
        java {
            srcDirs += [querydslDir]
        }
    }
}

tasks.withType(JavaCompile) {
    options.generatedSourceOutputDirectory = file(querydslDir)
}
*/
clean {
    delete file(querydslDir)
}
