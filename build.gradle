buildscript {
    ext {
        queryDslVersion = "5.0.0"
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.5'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'com.github.node-gradle.node' version '7.0.1'
    id("org.springdoc.openapi-gradle-plugin") version "1.9.0"
}

group = 'com.sweetk'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

ext {
    jarVersion = '0.0.1'
    apiDocVersion = 'v0.0.1'
    apiDocversionTag = apiDocVersion
    env = findProperty("env") ?: "local"
    buildTime = new Date().format("yyyyMMddHHmmss")
    
    // OpenAPI 문서 생성용 포트
    openApiDocPort = 28080

    openApiOutputDir = file("$rootDir/docs-dist")
    springBootStaticDir = file("src/main/resources/static/docs")
    apiDocFileName = "openapi-${apiDocversionTag}.yaml"
    apiDocLatestFile = "openapi-latest.yaml"

    apiDocUrlBase = [
            local : "http://localhost:28080/api",
            dev   : "https://dev.api.yourdomain.com/api",
            stage : "https://stage.api.yourdomain.com/api",
            prod  : "https://api.yourdomain.com/api"
    ][env]

    environments = ['local', 'dev', 'stage', 'prod']
    defaultEnv = 'dev'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'com.github.ben-manes.caffeine:caffeine'

    // QueryDSL
    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}:jakarta"
    implementation "com.querydsl:querydsl-apt:${queryDslVersion}:jakarta"
    annotationProcessor "com.querydsl:querydsl-apt:${queryDslVersion}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    // OpenAPI
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-api:2.3.0'
    implementation 'org.springdoc:springdoc-openapi-starter-common:2.3.0'
    
    // Rate Limiting
    implementation 'com.bucket4j:bucket4j-core:8.7.0'
    
    // Monitoring
    implementation 'io.micrometer:micrometer-core'
    implementation 'io.micrometer:micrometer-registry-prometheus'
    
    // Database
    implementation 'org.postgresql:postgresql'

    // Test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'

    // Log4j2
    implementation 'org.springframework.boot:spring-boot-starter-log4j2'
}

configurations {
    all {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
}

// QueryDSL 설정
def querydslDir = "$buildDir/generated/sources/annotationProcessor/java/main"

tasks.withType(JavaCompile) {
    options.annotationProcessorGeneratedSourcesDirectory = file(querydslDir)
}

tasks.register('cleanQuerydsl', Delete) {
    delete file(querydslDir)
}

openApi {
    outputDir = openApiOutputDir
    outputFileName = apiDocFileName
    apiDocsUrl = "${apiDocUrlBase}/v3/api-docs"
    // 필요시 waitTimeInSeconds 등 추가 설정
}

tasks.register("copyVersionedDoc", Copy) {
    if (tasks.findByName('openApi')) {
        dependsOn("openApi")
    }
    from(openApiOutputDir) {
        include(apiDocFileName)
    }
    into(springBootStaticDir)
}

tasks.register("copyLatestDoc", Copy) {
    dependsOn("copyVersionedDoc")
    from(openApiOutputDir) {
        include(apiDocFileName)
        rename { apiDocFileName -> "latest.yaml" }
    }
    into(springBootStaticDir)
}

tasks.register("copyDocsToResources") {
    if (tasks.findByName('openApi')) {
        dependsOn("copyVersionedDoc", "copyLatestDoc")
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

// ✅ bootJar 전역 설정
bootJar {
    enabled = true
    archiveClassifier = ''
    
    // 기본 application.yml은 포함
    // 환경별 설정 파일은 제외 (런타임에 외부에서 로드)
    exclude 'application-*.yml'
    exclude 'application-*.properties'
    
    // 로그 설정 파일은 제외 (런타임에 외부에서 로드)
    exclude 'log4j2-*.xml'

    archiveBaseName = 'iitp-api'
    mainClass.set('com.sweetk.iitp.IitpApiApplication') // ✅ mainClass 명시

    manifest {
        attributes(
                'Build-Time': buildTime,
                'Version': jarVersion
        )
    }
}

jar {
    enabled = true
    archiveClassifier = 'original'
    
    // 기본 application.yml은 포함
    // 환경별 설정 파일은 제외 (런타임에 외부에서 로드)
    exclude 'application-*.yml'
    exclude 'application-*.properties'
    
    // 로그 설정 파일은 제외 (런타임에 외부에서 로드)
    exclude 'log4j2-*.xml'
}

bootRun {
    systemProperty "spring.profiles.active", env
    systemProperty "app.version", jarVersion
    systemProperty "app.build.date", buildTime
    systemProperty "jasypt.encryptor.password", System.getProperty("jasypt.encryptor.password", "dev-password")
    systemProperty "API_DOC_URL", "${apiDocUrlBase}/docs/latest.yaml"
}

// ✅ 통합된 환경별 빌드 태스크
tasks.register('buildLocal') {
    group = 'build'
    description = 'Builds the application for local environment'
    doFirst {
        project.ext.set('env', 'local')
        bootJar.archiveVersion.set("${jarVersion}-local-${buildTime}")
    }
    doLast {
        copy {
            from 'src/main/resources'
            into 'build/resources/main'
            include 'application-local.yml'
            include 'log4j2-local.xml'
        }
    }
    dependsOn("copyDocsToResources", "bootJar")
}

tasks.register('buildDev') {
    group = 'build'
    description = 'Builds the application for development environment'
    doFirst {
        project.ext.set('env', 'dev')
        bootJar.archiveVersion.set("${jarVersion}-dev-${buildTime}")
    }
    doLast {
        copy {
            from 'src/main/resources'
            into 'build/resources/main'
            include 'application-dev.yml'
            include 'log4j2-dev.xml'
        }
    }
    dependsOn("copyDocsToResources", "bootJar")
}

tasks.register('buildStage') {
    group = 'build'
    description = 'Builds the application for staging environment'
    doFirst {
        project.ext.set('env', 'stage')
        bootJar.archiveVersion.set("${jarVersion}-stage-${buildTime}")
    }
    doLast {
        copy {
            from 'src/main/resources'
            into 'build/resources/main'
            include 'application-stage.yml'
            include 'log4j2-stage.xml'
        }
    }
    dependsOn("copyDocsToResources", "bootJar")
}

tasks.register('buildProd') {
    group = 'build'
    description = 'Builds the application for production environment'
    doFirst {
        project.ext.set('env', 'prod')
        bootJar.archiveVersion.set("${jarVersion}-prod-${buildTime}")
    }
    doLast {
        copy {
            from 'src/main/resources'
            into 'build/resources/main'
            include 'application-prod.yml'
            include 'log4j2-prod.xml'
        }
    }
    dependsOn("copyDocsToResources", "bootJar")
}

tasks.named('build') {
    dependsOn "build${defaultEnv.capitalize()}"
}

processResources {
    filesMatching('application*.yml') {
        filter {
            it.replace('@build.time@', buildTime)
                    .replace('@version@', jarVersion)
                    .replace('@springdoc.version@', apiDocVersion)
        }
    }
}
