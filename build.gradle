buildscript {
    ext {
        queryDslVersion = "5.0.0"
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.5'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'com.github.node-gradle.node' version '7.0.1'
    id 'org.springdoc.openapi-gradle-plugin' version '1.9.0'
}

group = 'com.sweetk'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

ext {
    jarVersion = '0.0.5'
    apiDocVersion = 'v0.0.4'
    apiDocversionTag = apiDocVersion
    env = findProperty("env") ?: "local"
    buildTime = new Date().format("yyyyMMddHHmmss")
    
    // OpenAPI 문서 생성용 포트
    openApiDocPort = 28081

    openApiOutputDir = file("$rootDir/docs-dist")
    springBootStaticDir = file("src/main/resources/static/docs")
    apiDocFileName = "openapi-${apiDocversionTag}.yaml"
    apiDocLatestFile = "latest.yaml"

    // 문서 생성용 URL은 항상 로컬만 사용
    apiDocUrlBase = "http://localhost:${openApiDocPort}"

    environments = ['local', 'dev', 'stage', 'prod']
    defaultEnv = 'dev'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'com.github.ben-manes.caffeine:caffeine'

    // QueryDSL
    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}:jakarta"
    implementation "com.querydsl:querydsl-apt:${queryDslVersion}:jakarta"
    annotationProcessor "com.querydsl:querydsl-apt:${queryDslVersion}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    // OpenAPI - springdoc-openapi-starter-webmvc-api만 사용 (Swagger UI 없이 /v3/api-docs만 제공)
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-api:2.3.0'
    implementation 'io.swagger.core.v3:swagger-core-jakarta:2.2.20'
    implementation 'io.swagger.core.v3:swagger-annotations-jakarta:2.2.20'
    implementation 'io.swagger.core.v3:swagger-models-jakarta:2.2.20'
    
    // Rate Limiting
    implementation 'com.bucket4j:bucket4j-core:8.7.0'
    
    // Monitoring
    implementation 'io.micrometer:micrometer-core'
    implementation 'io.micrometer:micrometer-registry-prometheus'
    
    // Database
    implementation 'org.postgresql:postgresql'

    // Test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'

    // Log4j2
    implementation 'org.springframework.boot:spring-boot-starter-log4j2'

    // Jasypt
    implementation 'com.github.ulisesbocchio:jasypt-spring-boot-starter:3.0.5'
}

configurations {
    all {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
}

// QueryDSL 설정
def querydslDir = "$buildDir/generated/sources/annotationProcessor/java/main"

tasks.withType(JavaCompile) {
    options.annotationProcessorGeneratedSourcesDirectory = file(querydslDir)
}

tasks.register('cleanQuerydsl', Delete) {
    delete file(querydslDir)
}

// Replace the existing generateOpenApiDocs task with this new configuration
openApi {
    apiDocsUrl.set("${apiDocUrlBase}/v3/api-docs")
    outputDir.set(file(openApiOutputDir))
    outputFileName.set(apiDocFileName)
    waitTimeInSeconds.set(30)
    
    customBootRun {
        args.set([
            "--spring.profiles.active=local",
            "--springdoc.api-docs.enabled=true",
            "--springdoc.swagger-ui.enabled=false",
            "--springdoc.api-docs.path=/v3/api-docs",
            "--springdoc.packages-to-scan=com.sweetk.iitp.api.controller",
            "--springdoc.paths-to-match=/api/**",
            "--server.port=${openApiDocPort}"
        ])
        systemProperties.set([
            "jasypt.encryptor.password": System.getProperty("jasypt.encryptor.password", "iitp")
        ])
    }
}

tasks.register("copyVersionedDoc", Copy) {
    dependsOn("generateOpenApiDocs")
    from(openApiOutputDir) {
        include(apiDocFileName)
    }
    into(springBootStaticDir)
    outputs.upToDateWhen { false }
}

tasks.register("copyLatestDoc", Copy) {
    dependsOn("copyVersionedDoc")
    from(openApiOutputDir) {
        include(apiDocFileName)
        rename { apiDocFileName -> apiDocLatestFile }
    }
    into(springBootStaticDir)
    outputs.upToDateWhen { false }
}

tasks.register("copyDocsToResources") {
    dependsOn("copyVersionedDoc", "copyLatestDoc")
    doFirst {
        // 현재 버전 파일명을 txt로 저장
        def apiDocFileName = project.ext.apiDocFileName
        def scriptFile = "scripts/api-doc-filename.txt"
        file(scriptFile).text = apiDocFileName
    }
    doLast {
        println("OpenAPI document copy completed.")
        // x-tagGroups 자동 추가 스크립트 실행
        exec {
            commandLine "python", "scripts/add-x-tagGroups.py"
        }
    }
    outputs.upToDateWhen { false }
}

tasks.named('test') {
    useJUnitPlatform()
}

// ✅ bootJar 전역 설정
bootJar {
    enabled = true
    archiveClassifier = ''
    
    // 환경별 설정 파일도 모두 포함
    // exclude 'application-*.yml'
    // exclude 'application-*.properties'
    // exclude 'log4j2-*.xml'

    archiveBaseName = 'iitp-api'
    mainClass.set('com.sweetk.iitp.IitpApiApplication') // ✅ mainClass 명시

    manifest {
        attributes(
                'Build-Time': buildTime,
                'Version': jarVersion
        )
    }
}

jar {
    enabled = true
    archiveClassifier = 'original'
    
    // 기본 application.yml은 포함
    // 환경별 설정 파일은 제외 (런타임에 외부에서 로드)
    exclude 'application-*.yml'
    exclude 'application-*.properties'
    
    // 로그 설정 파일은 제외 (런타임에 외부에서 로드)
    exclude 'log4j2-*.xml'
}

bootRun {
    systemProperty "spring.profiles.active", project.hasProperty('env') ? env : 'local'
    systemProperty "app.version", jarVersion
    systemProperty "app.build.date", buildTime
    systemProperty "jasypt.encryptor.password", System.getProperty("jasypt.encryptor.password", "iitp")
    systemProperty "API_DOC_URL", "${apiDocUrlBase}/docs/latest.yaml"
}

// ✅ 통합된 환경별 빌드 태스크
tasks.register('buildLocal') {
    group = 'build'
    description = 'Builds the application for local environment'
    project.ext.set('env', 'local')
    bootJar.archiveBaseName.set('iitp-api')
    bootJar.archiveVersion.set("${jarVersion}-local-${buildTime}")
    dependsOn("processResources", "bootJar")
}

tasks.register('buildDev') {
    group = 'build'
    description = 'Builds the application for development environment'
    project.ext.set('env', 'dev')
    bootJar.archiveBaseName.set('iitp-api')
    bootJar.archiveVersion.set("${jarVersion}-dev-${buildTime}")
    dependsOn("processResources", "bootJar")
}

tasks.register('buildStage') {
    group = 'build'
    description = 'Builds the application for staging environment'
    project.ext.set('env', 'stage')
    bootJar.archiveBaseName.set('iitp-api')
    bootJar.archiveVersion.set("${jarVersion}-stage-${buildTime}")
    dependsOn("processResources", "bootJar")
}

tasks.register('buildProd') {
    group = 'build'
    description = 'Builds the application for production environment'
    project.ext.set('env', 'prod')
    bootJar.archiveBaseName.set('iitp-api')
    bootJar.archiveVersion.set("${jarVersion}-prod-${buildTime}")
    dependsOn("processResources", "bootJar")
}

tasks.named('build') {
    dependsOn "build${defaultEnv.capitalize()}"
}

tasks.named('processResources') {
    doFirst {
        def env = project.hasProperty('env') ? project.env : 'local'
        // 환경별 파일만 포함
        filesMatching('application-*.yml') {
            if (!(name == 'application.yml' || name == "application-${env}.yml")) {
                exclude()
            }
        }
        filesMatching('log4j2-*.xml') {
            if (!(name == "log4j2-${env}.xml")) {
                exclude()
            }
        }
    }
    // filter(치환) 설정 추가!
    filesMatching('application*.yml') {
        filter {
            it.replace('@build.time@', buildTime)
              .replace('@version@', jarVersion)
              .replace('@springdoc.version@', apiDocVersion)
        }
    }
}

task encrypt(type: JavaExec) {
    group = 'encryption'
    description = 'Jasypt로 평문을 암호화합니다. --plain-text, --password 인자 필요.'
    mainClass = 'com.sweetk.iitp.api.util.JasyptEncryptor'
    classpath = sourceSets.main.runtimeClasspath
    jvmArgs = ['-Dfile.encoding=UTF-8']
    args = [
        project.hasProperty('plain-text') ? project.property('plain-text') : '',
        project.hasProperty('password') ? project.property('password') : ''
    ]
    doFirst {
        if (!project.hasProperty('plain-text') || !project.hasProperty('password')) {
            throw new GradleException('plain-text와 password 인자를 --plain-text, --password로 모두 지정해야 합니다.')
        }
    }
}

// 환경별 리소스 복사 및 정리
processResources.doFirst {
    def env = project.hasProperty('env') ? project.env : 'local'
    delete {
        delete fileTree('build/resources/main') {
            include 'application-*.yml'
            include 'log4j2-*.xml'
        }
    }
    if (env == 'local') {
        copy {
            from('src/main/resources') {
                include 'application.yml'
                include 'application-local.yml'
                include 'log4j2-local.xml'
            }
            into('build/resources/main')
            filter {
                it.replace('@build.time@', buildTime)
                  .replace('@version@', jarVersion)
                  .replace('@springdoc.version@', apiDocVersion)
            }
        }
    } else if (env == 'dev') {
        copy {
            from('src/main/resources') {
                include 'application.yml'
                include 'application-dev.yml'
                include 'log4j2-dev.xml'
            }
            into('build/resources/main')
            filter {
                it.replace('@build.time@', buildTime)
                  .replace('@version@', jarVersion)
                  .replace('@springdoc.version@', apiDocVersion)
            }
        }
    } else if (env == 'stage') {
        copy {
            from('src/main/resources') {
                include 'application.yml'
                include 'application-stage.yml'
                include 'log4j2-stage.xml'
            }
            into('build/resources/main')
            filter {
                it.replace('@build.time@', buildTime)
                  .replace('@version@', jarVersion)
                  .replace('@springdoc.version@', apiDocVersion)
            }
        }
    } else if (env == 'prod') {
        copy {
            from('src/main/resources') {
                include 'application.yml'
                include 'application-prod.yml'
                include 'log4j2-prod.xml'
            }
            into('build/resources/main')
            filter {
                it.replace('@build.time@', buildTime)
                  .replace('@version@', jarVersion)
                  .replace('@springdoc.version@', apiDocVersion)
            }
        }
    }
}
